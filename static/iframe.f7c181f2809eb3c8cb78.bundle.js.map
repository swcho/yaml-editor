{"version":3,"file":"static/iframe.f7c181f2809eb3c8cb78.bundle.js","sources":["webpack:///./src/YamlEditor.tsx"],"sourcesContent":["\n/// <reference path=\"ext/monaco.d.ts\"/>\n\nimport * as React from 'react';\nimport * as monaco from 'monaco-editor-core';\nconst Worker = require('worker-loader!./ext/yaml.worker');\n\nrequire('./ext/monaco.contribution')\n// import * as monaco from 'monaco-yaml';\n\nwindow['MonacoEnvironment'] = {\n  getWorker(workerId, label) {\n    console.log({ workerId, label });\n    if (label === 'yaml') {\n      return new Worker();\n    }\n    return null;\n  },\n  // getWorkerUrl(workerId, label) {\n  //   debugger;\n  //   return 'monaco-editor-worker-loader-proxy.js';\n  // }\n};\n\nexport class YamlEditor extends React.Component<YamlEditor.Props> {\n  private root: HTMLDivElement | null;\n  render() {\n    return (\n      <div {...this.props} ref={ref => this.root = ref}>\n      </div>\n    );\n  }\n\n  private editor: monaco.editor.IStandaloneCodeEditor;\n  componentDidMount() {\n    if (this.root) {\n      const {\n        options,\n      } = this.props;\n      this.editor = monaco.editor.create(this.root, {\n        language: 'yaml',\n        ...options,\n      });\n      monaco.languages['yaml'].yamlDefaults.setDiagnosticsOptions({\n\t\t\t\tvalidate: true,\n\t\t\t\tschemas: [\n\t\t\t\t\t{\n\t\t\t\t\t\turi: 'https://raw.githubusercontent.com/garethr/kubernetes-json-schema/master/master/deployment.json',\n\t\t\t\t\t\tfileMatch: ['*'],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\n    }\n  }\n\n  getValue() {\n    return this.editor.getValue();\n  }\n}\n\nexport namespace YamlEditor {\n  export type Props = {\n    options?: monaco.editor.IEditorConstructionOptions;\n  } & Pick<React.HTMLAttributes<HTMLDivElement>, \"style\">;\n}\n"],"mappings":"AAGA","sourceRoot":""}